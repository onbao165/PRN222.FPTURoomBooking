@model CreateBookingViewModel

<div class="container-fluid px-4">
    <h1 class="mt-4">Create Booking</h1>
    <div class="card mb-4">
        <div class="card-header">
            <i class="fas fa-calendar-plus me-1"></i> New Booking
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    <form asp-action="Create" method="post">
                        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                        
                        <div class="form-group mb-3">
                            <label asp-for="BookingDate" class="control-label"></label>
                            <input asp-for="BookingDate" class="form-control" type="date" />
                            <span asp-validation-for="BookingDate" class="text-danger"></span>
                        </div>

                        <div class="form-group mb-3">
                            <label asp-for="CampusId" class="control-label">Campus</label>
                            <select asp-for="CampusId" class="form-control"
                                    asp-items="@(new SelectList(Model.Campuses, "Value", "Text"))">
                                <option value="">-- Select Campus --</option>
                            </select>
                            <span asp-validation-for="CampusId" class="text-danger"></span>
                        </div>

                        <div class="form-group mb-3">
                            <label asp-for="RoomId" class="control-label">Room</label>
                            <select asp-for="RoomId" class="form-control"
                                    asp-items="@(new SelectList(Model.Rooms, "Value", "Text"))">
                                <option value="">-- Select Room --</option>
                            </select>
                            <span asp-validation-for="RoomId" class="text-danger"></span>
                        </div>

                        <div class="form-group mb-3">
                            <label asp-for="StartTime" class="control-label"></label>
                            <input asp-for="StartTime" class="form-control" type="time" />
                            <span asp-validation-for="StartTime" class="text-danger"></span>
                        </div>

                        <div class="form-group mb-3">
                            <label asp-for="EndTime" class="control-label"></label>
                            <input asp-for="EndTime" class="form-control" type="time" />
                            <span asp-validation-for="EndTime" class="text-danger"></span>
                        </div>

                        <div class="form-group">
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-save"></i> Create Booking
                            </button>
                            <a asp-action="Index" class="btn btn-secondary">
                                <i class="fas fa-arrow-left"></i> Back to List
                            </a>
                        </div>
                    </form>
                </div>
                <div class="col-md-6">
                    <div id="bookedSlots">
                        <!-- Booked slots will be loaded here -->
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    
    <script>
        function loadBookedSlots() {
            const roomId = $('#RoomId').val();
            const bookingDate = $('#BookingDate').val();
            
            if (!roomId || !bookingDate) {
                $('#bookedSlots').empty();
                return;
            }

            $.get('@Url.Action("GetBookedSlots", "Booking")', {
                roomId: roomId,
                date: bookingDate
            }, function(response) {
                $('#bookedSlots').html(response);
            });
        }

        $(document).ready(function() {
            // Handle campus change
            $('#CampusId').change(function() {
                const campusId = $(this).val();
                // Clear room dropdown
                $('#RoomId').empty().append($('<option></option>').val('').text('-- Select Room --'));
                $('#bookedSlots').empty();
                
                if (campusId) {
                    // Update rooms dropdown via AJAX
                    $.get('@Url.Action("GetRooms", "Booking")', { campusId: campusId }, function(data) {
                        $.each(data, function(i, item) {
                            $('#RoomId').append($('<option></option>').val(item.id).text(item.name));
                        });
                    });
                }
            });

            // Load booked slots when room or date changes
            $('#RoomId, #BookingDate').change(loadBookedSlots);

            // Form validation
            $('form').submit(function(e) {
                const startTime = $('#StartTime').val();
                const endTime = $('#EndTime').val();
                const bookingDate = $('#BookingDate').val();
                
                // Create Date objects for start and end times using the booking date
                const startDateTime = new Date(bookingDate);
                const endDateTime = new Date(bookingDate);
                
                // Parse hours and minutes from the time inputs
                const [startHours, startMinutes] = startTime.split(':');
                const [endHours, endMinutes] = endTime.split(':');
                
                // Set the hours and minutes
                startDateTime.setHours(parseInt(startHours), parseInt(startMinutes), 0);
                endDateTime.setHours(parseInt(endHours), parseInt(endMinutes), 0);

                // Validate booking hours (6 AM - 10 PM)
                const earliestTime = new Date(bookingDate);
                const latestTime = new Date(bookingDate);
                earliestTime.setHours(6, 0, 0); // 6 AM
                latestTime.setHours(22, 0, 0);  // 10 PM

                if (startDateTime < earliestTime || endDateTime > latestTime) {
                    e.preventDefault();
                    alert('Booking hours must be between 6:00 AM and 10:00 PM');
                    return;
                }

                // Validate minimum duration (30 minutes)
                const durationMinutes = (endDateTime - startDateTime) / (1000 * 60);
                if (durationMinutes < 30) {
                    e.preventDefault();
                    alert('Booking duration must be at least 30 minutes');
                    return;
                }
                
                if (startDateTime >= endDateTime) {
                    e.preventDefault();
                    alert('End time must be after start time.');
                }

                // Additional validation can be added here to check for time slot conflicts
            });
        });
    </script>
} 
