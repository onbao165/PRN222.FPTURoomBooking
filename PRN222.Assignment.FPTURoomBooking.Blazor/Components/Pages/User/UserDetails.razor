@page "/User/Create"
@page "/User/{Id:guid}"
@using Mapster
@using Microsoft.AspNetCore.Authorization
@using PRN222.Assignment.FPTURoomBooking.Repositories.Models
@using PRN222.Assignment.FPTURoomBooking.Services.Models.Account
@using PRN222.Assignment.FPTURoomBooking.Services.Services.Interfaces
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Admin")]
@inject IAccountService UserService
@inject NavigationManager NavigationManager

<style>
    .user-details-card {
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        border: none;
        border-radius: 8px;
    }

    .user-details-header {
        background-color: #f8f9fa;
        border-bottom: 1px solid #e9ecef;
        padding: 1.5rem;
        border-radius: 8px 8px 0 0;
    }

    .user-details-title {
        color: #2c3e50;
        margin: 0;
        font-weight: 600;
    }

    .back-button {
        padding: 0.5rem 1.5rem;
        font-weight: 500;
        transition: all 0.3s ease;
    }

    .back-button:hover {
        background-color: #4a5568;
        transform: translateY(-1px);
    }

    .form-label {
        color: #2d3748;
        font-weight: 500;
        margin-bottom: 0.5rem;
    }

    .form-control, .form-select {
        border-radius: 6px;
        border: 1px solid #e2e8f0;
        padding: 0.625rem;
        transition: all 0.3s ease;
    }

    .form-control:focus, .form-select:focus {
        border-color: #3182ce;
        box-shadow: 0 0 0 3px rgba(49, 130, 206, 0.1);
    }

    .validation-message {
        font-size: 0.875rem;
        color: #e53e3e;
        margin-top: 0.25rem;
    }

    .btn-primary {
        background-color: #3182ce;
        border: none;
        padding: 0.625rem 2rem;
        font-weight: 500;
        transition: all 0.3s ease;
    }

    .btn-primary:hover {
        background-color: #2c5282;
        transform: translateY(-1px);
    }

    .details-view {
        background-color: #fff;
        padding: 2rem;
        border-radius: 8px;
    }

    .details-label {
        color: #4a5568;
        font-size: 0.875rem;
        text-transform: uppercase;
        letter-spacing: 0.05em;
        margin-bottom: 0.5rem;
    }

    .details-value {
        color: #2d3748;
        font-size: 1rem;
        margin-bottom: 1.5rem;
        padding: 0.5rem;
        background-color: #f7fafc;
        border-radius: 6px;
        border: 1px solid #edf2f7;
    }

    .alert {
        border-radius: 8px;
        border: none;
    }

    .alert-info {
        background-color: #ebf8ff;
        color: #2c5282;
        border-left: 4px solid #4299e1;
    }

    .alert-danger {
        background-color: #fff5f5;
        color: #c53030;
        border-left: 4px solid #fc8181;
    }

    .spinner-border {
        color: #3182ce;
    }
</style>

<PageTitle>@(_isNew ? "Create User" : "User Details")</PageTitle>

<div class="container mt-4">
    <div class="card user-details-card">
        <div class="card-header user-details-header d-flex justify-content-between align-items-center">
            <h3 class="user-details-title">@(_isNew ? "Create User" : "User Details")</h3>
            <button class="btn btn-secondary back-button" @onclick="GoBack">Back to List</button>
        </div>
        <div class="card-body p-4">
            @if (_loading)
            {
                <div class="text-center p-5">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else
            {
                @if (!string.IsNullOrEmpty(_errorMessage))
                {
                    <div class="alert alert-danger alert-dismissible fade show mb-4" role="alert">
                        <div class="d-flex align-items-center">
                            <i class="bi bi-exclamation-triangle-fill me-2"></i>
                            @_errorMessage
                        </div>
                        <button type="button" class="btn-close" @onclick="() => _errorMessage = null"
                                aria-label="Close"></button>
                    </div>
                }

                @if (_isNew)
                {
                    <EditForm Model="@_initUser" OnValidSubmit="HandleSubmit">
                        <DataAnnotationsValidator/>
                        <ValidationSummary/>

                        <div class="mb-3">
                            <label class="form-label">Email</label>
                            <InputText @bind-Value="_initUser.Email" class="form-control"/>
                            <ValidationMessage For="@(() => _initUser.Email)"/>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Full Name</label>
                            <InputText @bind-Value="_initUser.FullName" class="form-control"/>
                            <ValidationMessage For="@(() => _initUser.FullName)"/>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Username</label>
                            <InputText @bind-Value="_initUser.Username" class="form-control"/>
                            <ValidationMessage For="@(() => _initUser.Username)"/>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Password</label>
                            <InputText type="password" @bind-Value="_initUser.Password" class="form-control"/>
                            <ValidationMessage For="@(() => _initUser.Password)"/>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Role</label>
                            <InputSelect @bind-Value="@_initUser.Role" class="form-select">
                                <option value="@AccountRole.Admin">Admin</option>
                                <option value="@AccountRole.Manager">Manager</option>
                                <option value="@AccountRole.User">User</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => _initUser.Role)"/>
                        </div>

                        @if (_initUser.Role != AccountRole.Admin)
                        {
                            <div class="mb-3">
                                <label class="form-label">Department</label>
                                <InputSelect @bind-Value="@_initUser.DepartmentId" class="form-select">
                                    <option value="">Select Department</option>
                                    @foreach (var dept in _departments)
                                    {
                                        <option value="@dept.Id">@dept.Name</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => _initUser.DepartmentId)"/>
                            </div>
                        }

                        <div class="alert alert-info">
                            <strong>Password Requirements:</strong>
                            <ul class="mb-0">
                                <li>Must be between 6 and 255 characters</li>
                                <li>Must contain at least one uppercase letter</li>
                                <li>Must contain at least one lowercase letter</li>
                                <li>Must contain at least one number</li>
                            </ul>
                        </div>

                        <button type="submit" class="btn btn-primary">Create</button>
                    </EditForm>
                }
                else
                {
                    <div class="details-view">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-4">
                                    <div class="details-label">Email</div>
                                    <div class="details-value">@_initUser.Email</div>
                                </div>

                                <div class="mb-4">
                                    <div class="details-label">Full Name</div>
                                    <div class="details-value">@_initUser.FullName</div>
                                </div>

                                <div class="mb-4">
                                    <div class="details-label">Username</div>
                                    <div class="details-value">@_initUser.Username</div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-4">
                                    <div class="details-label">Role</div>
                                    <div class="details-value">@_initUser.Role</div>
                                </div>

                                <div class="mb-4">
                                    <div class="details-label">Department</div>
                                    <div class="details-value">
                                        @(_departments.FirstOrDefault(d => d.Id == _initUser.DepartmentId)?.Name ?? "No Department")
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public Guid? Id { get; set; }

    private AccountModel _user = new();
    private List<Department> _departments = [];

    private InitAccountModel _initUser = new()
    {
        FullName = null,
        Email = null,
        Username = null,
        Password = null,
        DepartmentId = Guid.Empty,
        Role = AccountRole.User
    };

    private bool _loading = true;
    private bool _isNew => Id == null;
    private string? _errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadDepartments(); // Load departments first
        if (!_isNew)
        {
            await LoadUser();
        }
        else
        {
            _loading = false;
        }
    }

    private async Task LoadUser()
    {
        try
        {
            _loading = true;
            _errorMessage = null;
            var result = await UserService.GetAsync(Id!.Value);
            if (result.IsSuccess)
            {
                _initUser = result.Data.Adapt<InitAccountModel>();
                if (_initUser.Role == AccountRole.Manager && !_departments.Any())
                {
                    _errorMessage = "Warning: No departments available for manager role.";
                }
            }
            else
            {
                _errorMessage = result.Error;
                NavigationManager.NavigateTo("/User");
            }
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task LoadDepartments()
    {
        try
        {
            var result = await UserService.GetDepartmentsAsync();
            if (result.IsSuccess)
            {
                _departments = result.Data;
            }
            else
            {
                _errorMessage = "Failed to load departments";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error loading departments: {ex.Message}";
        }
    }

    private async Task HandleSubmit()
    {
        _errorMessage = null;
        var result = await UserService.CreateAsync(_initUser);

        if (result.IsSuccess)
        {
            NavigationManager.NavigateTo("/User");
        }
        else
        {
            _errorMessage = result.Error;
            StateHasChanged();
        }
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/User");
    }

}