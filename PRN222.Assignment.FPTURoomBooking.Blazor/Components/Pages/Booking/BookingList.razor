@page "/Booking"
@rendermode InteractiveServer
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.SignalR.Client
@using PRN222.Assignment.FPTURoomBooking.Blazor.Components.Layout
@using PRN222.Assignment.FPTURoomBooking.Repositories.Models
@using PRN222.Assignment.FPTURoomBooking.Services.Models.Booking
@using PRN222.Assignment.FPTURoomBooking.Services.Services.Interfaces
@using PRN222.Assignment.FPTURoomBooking.Blazor.Components.Shared
@using PRN222.Assignment.FPTURoomBooking.Services.Utils
@inject IBookingService BookingService
@inject IAccountService AccountService
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor
@attribute [Authorize]

<PageTitle>Booking List</PageTitle>

<div class="container-fluid">
    <h3 class="mb-4">Booking Management</h3>

    <div class="card mb-4">
        <div class="card-header">
            <div class="row align-items-center">
                <div class="col">
                    <h5 class="mb-0">Filters</h5>
                </div>
            </div>
        </div>
        <div class="card-body">
            <div class="row g-3">
                <div class="col-md-3">
                    <label class="form-label">Status</label>
                    <select class="form-select" @bind="_getModel.Status">
                        <option value="">All Status</option>
                        @foreach (var status in Enum.GetValues<BookingStatus>())
                        {
                            <option value="@status">@status</option>
                        }
                    </select>
                </div>
                <div class="col-md-3">
                    <label class="form-label">Start Date</label>
                    <input type="date" class="form-control" @bind="_getModel.StartDate" />
                </div>
                <div class="col-md-3">
                    <label class="form-label">End Date</label>
                    <input type="date" class="form-control" @bind="_getModel.EndDate" />
                </div>
                <div class="col-md-3">
                    <label class="form-label">Search</label>
                    <input type="text" class="form-control" @bind="_getModel.SearchTerm" placeholder="Search..." />
                </div>
            </div>
            <div class="row mt-3">
                <div class="col">
                    <button class="btn btn-primary" @onclick="ApplyFilters">Apply Filters</button>
                    <button class="btn btn-secondary" @onclick="ResetFilters">Reset</button>
                </div>
            </div>
        </div>
    </div>

    <div class="card">
        <div class="card-header">
            <h5 class="mb-0">Booking List</h5>
        </div>
        <div class="card-body">
            @if (_loading)
            {
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (_bookings?.Items.Any() != true)
            {
                <div class="alert alert-info">No bookings found.</div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Booking Date</th>
                                <th>Booked By</th>
                                <th>Status</th>
                                <th>Created At</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var booking in _bookings.Items)
                            {
                                <tr>
                                    <td>@booking.Id.ToString().Substring(0, 8)...</td>
                                    <td>@booking.BookingDate.ToString("yyyy-MM-dd")</td>
                                    <td>@booking.Account.FullName</td>
                                    <td>
                                        <span class="badge @GetStatusBadgeClass(booking.Status)">
                                            @booking.Status
                                        </span>
                                    </td>
                                    <td>@booking.CreatedAt.ToString("g")</td>
                                    <td>
                                        <a href="/Booking/Details/@booking.Id" class="btn btn-sm btn-info">
                                            Details
                                        </a>
                                        @if (booking.Status == BookingStatus.Pending)
                                        {
                                            <button class="btn btn-sm btn-danger"
                                                @onclick="@(e => HandleRejectBooking(booking.Id))">
                                                Reject
                                            </button>
                                            <button class="btn btn-sm btn-success"
                                                @onclick="@(e => HandleApproveBooking(booking.Id))">
                                                Approve
                                            </button>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <Pagination CurrentPage="@_getModel.PageNumber"
                    TotalPages="@((_bookings.TotalItems + _getModel.PageSize - 1) / _getModel.PageSize)"
                    OnPageChanged="HandlePageChanged" />
            }
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    public MainLayout? MainLayout { get; set; }
    
    private bool _loading = true;
    private PaginationResult<BookingModel>? _bookings;

    private GetBookingModel _getModel = new()
    {
        PageSize = 10,
        PageNumber = 1,
        OrderBy = "bookingDate",
        IsDescending = true
    };

    protected override async Task OnInitializedAsync()
    {
        var user = HttpContextAccessor.HttpContext?.User;
        if (user?.Identity?.IsAuthenticated == true)
        {
            var userId = user.FindFirstValue(ClaimTypes.NameIdentifier);
            if (!string.IsNullOrEmpty(userId) && Guid.TryParse(userId, out Guid userGuid))
            {
                var accountResult = await AccountService.GetAsync(userGuid);
                if (accountResult.IsSuccess && accountResult.Data != null)
                {
                    _getModel.DepartmentId = accountResult.Data.DepartmentId;
                }
            }
        }

        await LoadBookings();
    }

    private async Task LoadBookings()
    {
        try
        {
            _loading = true;
            var result = await BookingService.GetPagedAsync(_getModel);
            if (result.IsSuccess)
            {
                _bookings = result.Data;
            }
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task HandlePageChanged(int page)
    {
        _getModel.PageNumber = page;
        await LoadBookings();
    }

    private async Task ApplyFilters()
    {
        _getModel.PageNumber = 1;
        await LoadBookings();
    }

    private async Task ResetFilters()
    {
        _getModel = new GetBookingModel
        {
            PageSize = 10,
            PageNumber = 1,
            OrderBy = "bookingDate",
            IsDescending = true,
            DepartmentId = _getModel.DepartmentId,
            ManagerId = _getModel.ManagerId
        };
        await LoadBookings();
    }

    private string GetStatusBadgeClass(BookingStatus status) => status switch
    {
        BookingStatus.Pending => "bg-warning text-dark",
        BookingStatus.Approved => "bg-success",
        BookingStatus.Rejected => "bg-danger",
        BookingStatus.Cancelled => "bg-secondary",
        _ => "bg-primary"
    };

    private async Task HandleApproveBooking(Guid bookingId)
    {
        //Get Manager Id
        var managerId = Guid.Empty;
        var user = HttpContextAccessor.HttpContext?.User;
        if (user?.Identity?.IsAuthenticated == true)
        {
            var userId = user.FindFirstValue(ClaimTypes.NameIdentifier);
            if (!string.IsNullOrEmpty(userId) && Guid.TryParse(userId, out Guid userGuid))
            {
                managerId = userGuid;
            }
        }

        if (managerId == Guid.Empty)
        {
            return;
        }

        var result = await BookingService.UpdateStatusAsync(bookingId, managerId, BookingStatus.Approved);
        if (result.IsSuccess)
        {
            await LoadBookings();
            // Use the hub connection from MainLayout
            var hubConnection = MainLayout?.GetHubConnection();
            if (hubConnection is not null)
            {
                await hubConnection.SendAsync("SendBookingStatusUpdate");
            }
        }
    }

    private async Task HandleRejectBooking(Guid bookingId)
    {
        //Get Manager Id
        var managerId = Guid.Empty;
        var user = HttpContextAccessor.HttpContext?.User;
        if (user?.Identity?.IsAuthenticated == true)
        {
            var userId = user.FindFirstValue(ClaimTypes.NameIdentifier);
            if (!string.IsNullOrEmpty(userId) && Guid.TryParse(userId, out Guid userGuid))
            {
                managerId = userGuid;
            }
        }

        if (managerId == Guid.Empty)
        {
            return;
        }

        var result = await BookingService.UpdateStatusAsync(bookingId, managerId, BookingStatus.Rejected);
        if (result.IsSuccess)
        {
            await LoadBookings();
            // Use the hub connection from MainLayout
            var hubConnection = MainLayout?.GetHubConnection();
            if (hubConnection is not null)
            {
                await hubConnection.SendAsync("SendBookingStatusUpdate", bookingId, BookingStatus.Rejected);
            }
        }
    }

}
