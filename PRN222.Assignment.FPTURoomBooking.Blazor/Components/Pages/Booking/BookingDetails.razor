@page "/Booking/Details/{Id:guid}"
@using System.Security.Claims
@using Mapster
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.SignalR.Client
@using PRN222.Assignment.FPTURoomBooking.Blazor.Models
@using PRN222.Assignment.FPTURoomBooking.Repositories.Models
@using PRN222.Assignment.FPTURoomBooking.Services.Models.RoomSlot
@using PRN222.Assignment.FPTURoomBooking.Services.Services.Interfaces
@rendermode InteractiveServer
@inject IHttpContextAccessor HttpContextAccessor

@inject IBookingService BookingService
@inject IRoomSlotService RoomSlotService
@inject NavigationManager NavigationManager
@inject HubConnection HubConnection
@attribute [Authorize]

<PageTitle>Booking Details</PageTitle>

<div class="container-fluid">
    @if (_loading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (_booking == null)
    {
        <div class="alert alert-warning">
            Booking not found or you don't have permission to view it.
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title">Booking Details</h3>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <p><strong>Booking ID:</strong> @_booking.Id</p>
                                <p><strong>Booking Date:</strong> @_booking.BookingDate.ToString("yyyy-MM-dd")</p>
                                <p><strong>Booked By:</strong> @_booking.AccountName</p>
                                <p>
                                    <strong>Status:</strong>
                                    <span class="badge @GetStatusBadgeClass(_booking.Status)">@_booking.Status</span>
                                </p>
                                <p><strong>Created At:</strong> @_booking.CreatedAt.ToString("g")</p>
                            </div>
                        </div>

                        <h4 class="mt-4">Room Slots</h4>
                        @if (_booking.RoomSlots.Any())
                        {
                            <div class="table-responsive">
                                <table class="table table-bordered table-hover">
                                    <thead class="table-light">
                                    <tr>
                                        <th>Room</th>
                                        <th>Time Slot</th>
                                        <th>Time Range</th>
                                    </tr>
                                    </thead>
                                    <tbody>
                                    @foreach (var slot in _booking.RoomSlots)
                                    {
                                        <tr>
                                            <td>@slot.RoomName</td>
                                            <td>@slot.TimeSlot</td>
                                            <td>@slot.TimeSlotText</td>
                                        </tr>
                                    }
                                    </tbody>
                                </table>
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-info">
                                No room slots found for this booking.
                            </div>
                        }

                        @if (_booking.Status == BookingStatus.Pending)
                        {
                            <div class="mt-4">
                                <button class="btn btn-danger" @onclick="HandleRejectBooking">
                                    <i class="fas fa-times me-1"></i> Reject
                                </button>
                                <button class="btn btn-success me-2" @onclick="HandleApproveBooking">
                                    <i class="fas fa-check me-1"></i> Approve
                                </button>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
    <div class="row mt-3">
        <div class="col">
            <button class="btn btn-secondary" @onclick="NavigateBack">
                <i class="fas fa-arrow-left me-1"></i> Back to List
            </button>
        </div>
    </div>
</div>

@code {
    [Parameter] public Guid Id { get; set; }

    private bool _loading = true;
    private BookingDetailsViewModel? _booking;
    private Guid _currentUserId;
    private Guid _currentUserDepartmentId;

    protected override async Task OnInitializedAsync()
    {
        // Get current user ID from claims
        var user = HttpContextAccessor.HttpContext?.User;
        if (user?.Identity?.IsAuthenticated == true)
        {
            var userId = user.FindFirstValue(ClaimTypes.NameIdentifier);
            if (!string.IsNullOrEmpty(userId) && Guid.TryParse(userId, out var userGuid))
            {
                _currentUserId = userGuid;
            }

            var departmentId = user.FindFirstValue("DepartmentId");
            if (!string.IsNullOrEmpty(departmentId) && Guid.TryParse(departmentId, out var departmentGuid))
            {
                _currentUserDepartmentId = departmentGuid;
            }
        }

        if (HubConnection.State == HubConnectionState.Disconnected)
        {
            try
            {
                await HubConnection.StartAsync();
                Console.WriteLine("Connected to SignalR hub");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error connecting to SignalR: {ex.Message}");
            }
        }

        if (HubConnection.State == HubConnectionState.Connected)
        {
            try
            {
                // Join the department group
                if (_currentUserDepartmentId != Guid.Empty)
                {
                    await HubConnection.SendAsync("JoinDepartmentGroup", _currentUserDepartmentId);
                }

                HubConnection.On("ReceiveBookingStatusUpdate", async () =>
                {
                    Console.WriteLine("Received booking status update");
                    if (NavigationManager.Uri.Contains("/Booking"))
                    {
                        await LoadBooking();
                        StateHasChanged();
                    }
                });
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error joining department group: {ex.Message}");
            }
        }

        await LoadBooking();
    }

    private async Task LoadBooking()
    {
        try
        {
            _loading = true;

            var bookingResult = await BookingService.GetAsync(Id);
            if (!bookingResult.IsSuccess || bookingResult.Data == null)
            {
                return;
            }

            // Map the booking model to view model
            _booking = bookingResult.Data.Adapt<BookingDetailsViewModel>();
            // Add account information
            _booking.AccountName = bookingResult.Data.Account.FullName;

            // Get room slots
            var roomSlotsModel = new GetRoomSlotModel
            {
                BookingId = Id,
                PageSize = 100,
                IncludeDeleted = bookingResult.Data.Status is BookingStatus.Cancelled or BookingStatus.Rejected
            };

            var roomSlotsResult = await RoomSlotService.GetPagedAsync(roomSlotsModel);
            if (roomSlotsResult is { IsSuccess: true, Data.Items: not null })
            {
                _booking.RoomSlots = roomSlotsResult.Data.Items
                    .Adapt<List<BookingRoomSlotViewModel>>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading booking: {ex.Message}");
        }
        finally
        {
            _loading = false;
        }
    }

    private static string GetStatusBadgeClass(BookingStatus status) => status switch
    {
        BookingStatus.Pending => "bg-warning text-dark",
        BookingStatus.Approved => "bg-success",
        BookingStatus.Rejected => "bg-danger",
        BookingStatus.Cancelled => "bg-secondary",
        _ => "bg-primary"
    };

    private async Task HandleApproveBooking()
    {
        if (_booking == null)
        {
            return;
        }

        try
        {
            _loading = true;
            var result = await BookingService.UpdateStatusAsync(_booking.Id, _currentUserId, BookingStatus.Approved);
            if (result.IsSuccess)
            {
                await LoadBooking();
                // Use the injected hubConnection directly
                if (HubConnection.State == HubConnectionState.Connected)
                {
                    // Send notification to the user and all managers in the department
                    await HubConnection.SendAsync("SendBookingStatusUpdate", _booking.AccountId, _currentUserDepartmentId);
                }
            }
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task HandleRejectBooking()
    {
        if (_booking == null)
        {
            return;
        }

        try
        {
            _loading = true;
            var result = await BookingService.UpdateStatusAsync(_booking.Id, _currentUserId, BookingStatus.Rejected);
            if (result.IsSuccess)
            {
                await LoadBooking();
                // Use the injected hubConnection directly
                if (HubConnection.State == HubConnectionState.Connected)
                {
                    // Send notification to the user and all managers in the department
                    await HubConnection.SendAsync("SendBookingStatusUpdate", _booking.AccountId, _currentUserDepartmentId);
                }
            }
        }
        finally
        {
            _loading = false;
        }
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/Booking");
    }

}