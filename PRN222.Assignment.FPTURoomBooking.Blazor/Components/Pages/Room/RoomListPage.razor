@page "/Room"
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@using PRN222.Assignment.FPTURoomBooking.Services.Models.Room
@using PRN222.Assignment.FPTURoomBooking.Services.Services.Interfaces
@using PRN222.Assignment.FPTURoomBooking.Services.Utils
@using PRN222.Assignment.FPTURoomBooking.Blazor.Components.Shared
@using Microsoft.AspNetCore.SignalR.Client
@rendermode InteractiveServer
@attribute [Authorize]
@inject IRoomService RoomService
@inject IHttpContextAccessor HttpContextAccessor
@inject HubConnection HubConnection
@inject IJSRuntime JsRuntime

<PageTitle>Room Management</PageTitle>

<div class="container-fluid mt-4">
    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h3>Department Rooms</h3>
            <a href="/Room/Create" class="btn btn-primary">
                <i class="fa fa-plus"></i> Create New Room
            </a>
        </div>

        <div class="card-body">
            <div class="row mb-3">
                <div class="col-md-6">
                    <div class="input-group">
                        <input type="text" class="form-control" placeholder="Search rooms..."
                               @bind="_searchTerm" @bind:event="oninput" @onkeyup="HandleSearch"/>
                        <button class="btn btn-outline-secondary" @onclick="Search">
                            <i class="fa fa-search"></i>
                        </button>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="d-flex justify-content-end">
                        <select class="form-select w-auto me-2" @bind="_orderBy">
                            <option value="name">Name</option>
                            <option value="createdAt">Created Date</option>
                        </select>
                        <button class="btn btn-outline-secondary" @onclick="ToggleSortDirection">
                            <i class="fa fa-@(_isDescending ? "sort-down" : "sort-up")"></i>
                        </button>
                    </div>
                </div>
            </div>

            @if (_loading)
            {
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (!_rooms.Items.Any())
            {
                <div class="alert alert-info">
                    No rooms found.
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-striped">
                        <thead>
                        <tr>
                            <th>Name</th>
                            <th>Description</th>
                            <th>Department</th>
                            <th>Created At</th>
                            <th>Actions</th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var room in _rooms.Items)
                        {
                            <tr>
                                <td>@room.Name</td>
                                <td>@(room.Description ?? "N/A")</td>
                                <td>@room.Department.Name</td>
                                <td>@room.CreatedAt.ToShortDateString()</td>
                                <td>
                                    <a href="/Room/Edit/@room.Id" class="btn btn-sm btn-warning me-2">
                                        <i class="fa fa-edit"></i> Edit
                                    </a>
                                    <button class="btn btn-sm btn-danger" @onclick="() => DeleteRoom(room.Id)">
                                        <i class="fa fa-trash"></i> Delete
                                    </button>
                                </td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>

                <Pagination CurrentPage="@_currentPage" TotalPages="@_totalPages" OnPageChanged="@LoadRooms"/>
            }
        </div>
    </div>
</div>

@code {
    private PaginationResult<RoomModel> _rooms = new([], 0, 1, 10);
    private bool _loading = true;
    private int _currentPage = 1;
    private int _totalPages = 1;
    private Guid _departmentId;
    private string _searchTerm = "";
    private string _orderBy = "name";
    private bool _isDescending;

    protected override async Task OnInitializedAsync()
    {
        var user = HttpContextAccessor.HttpContext?.User;
        if (user?.Identity?.IsAuthenticated == true)
        {
            var departmentId = user.FindFirstValue("DepartmentId");
            if (!string.IsNullOrEmpty(departmentId) && Guid.TryParse(departmentId, out var departmentGuid))
            {
                _departmentId = departmentGuid;
            }
        }

        await LoadRooms(_currentPage);

        if (HubConnection.State == HubConnectionState.Disconnected)
        {
            try
            {
                await HubConnection.StartAsync();
                Console.WriteLine("Connected to SignalR hub");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error connecting to SignalR: {ex.Message}");
            }
        }

        if (HubConnection.State == HubConnectionState.Connected)
        {
            try
            {
                HubConnection.On("ReceiveRoomUpdate", async () =>
                {
                    await InvokeAsync(async () =>
                    {
                        await LoadRooms(_currentPage);
                        StateHasChanged();
                    });
                });
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error setting up SignalR: {ex.Message}");
            }
        }

        await base.OnInitializedAsync();
    }

    private async Task LoadRooms(int page)
    {
        try
        {
            _loading = true;
            var result = await RoomService.GetPagedAsync(new GetRoomModel
            {
                PageNumber = page,
                PageSize = 10,
                DepartmentId = _departmentId == Guid.Empty ? null : _departmentId,
                SearchTerm = _searchTerm,
                OrderBy = _orderBy,
                IsDescending = _isDescending
            });

            if (result is { IsSuccess: true, Data: not null })
            {
                var data = result.Data;
                _rooms = new PaginationResult<RoomModel>(data.Items, data.TotalItems, data.PageNumber, data.PageSize);
                _currentPage = page;
                _totalPages = (int)Math.Ceiling(data.TotalItems / 10.0);
            }
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task HandleSearch(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await Search();
        }
    }

    private async Task Search()
    {
        _currentPage = 1;
        await LoadRooms(1);
    }

    private async Task ToggleSortDirection()
    {
        _isDescending = !_isDescending;
        await LoadRooms(_currentPage);
    }

    private async Task DeleteRoom(Guid id)
    {
        if (!await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this room?"))
            return;

        try
        {
            _loading = true;
            var result = await RoomService.DeleteAsync(id);
            if (result.IsSuccess)
            {
                if (HubConnection.State == HubConnectionState.Connected)
                {
                    await HubConnection.SendAsync("SendRoomUpdate");
                }

                await LoadRooms(_currentPage);
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("alert", result.Error ?? "Failed to delete room");
            }
        }
        finally
        {
            _loading = false;
        }
    }

}