@inherits LayoutComponentBase
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            @if (isAuthenticated)
            {
                <span class="me-3">Welcome, @fullName!</span>
                <a href="/Account/Profile" class="me-3">Profile</a>
                <button class="btn btn-link" @onclick="LogoutAsync">Logout</button>
            }
            else
            {
                <a href="/Account/Login">Login</a>
            }
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private bool isAuthenticated = false;
    private string fullName = string.Empty;
    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        var user = HttpContextAccessor.HttpContext?.User;
        isAuthenticated = user?.Identity?.IsAuthenticated ?? false;

        if (isAuthenticated)
        {
            fullName = user!.FindFirstValue(ClaimTypes.Name) ?? "User";
        }

        hubConnection = new HubConnectionBuilder()
        .WithUrl("https://localhost:5000/messageHub") // Replace with your MVC SignalR hub URL
        .WithAutomaticReconnect()
        .Build();

        try
        {
            await hubConnection.StartAsync();
            Console.WriteLine("Connected to SignalR hub");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error connecting to SignalR: {ex.Message}");
        }

        await base.OnInitializedAsync();
    }

    private async Task LogoutAsync()
    {
        await HttpContextAccessor.HttpContext!.SignOutAsync(CookieAuthenticationDefaults.AuthenticationScheme);
        NavigationManager.NavigateTo("/Account/Login", true);
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    // Method to get the hub connection that can be used by other components
    public HubConnection? GetHubConnection() => hubConnection;
}