@inherits LayoutComponentBase
@using System.Security.Claims
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor
@inject HubConnection HubConnection

<div class="page">
    <div class="sidebar">
        <NavMenu/>
    </div>

    <main>
        <div class="top-row px-4">
            @if (_isAuthenticated)
            {
                <span class="me-3">Welcome, @_fullName!</span>
                <a href="/Account/Profile" class="me-3">Profile</a>
                <button class="btn btn-link" @onclick="HandleLogout">Logout</button>
            }
            else
            {
                <a href="/Account/Login">Login</a>
            }
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private bool _isAuthenticated;
    private string _fullName = string.Empty;
    private Guid _currentUserDepartmentId;

    protected override async Task OnInitializedAsync()
    {
        var user = HttpContextAccessor.HttpContext?.User;
        _isAuthenticated = user?.Identity?.IsAuthenticated == true;
        if (_isAuthenticated)
        {
            _fullName = user!.FindFirstValue(ClaimTypes.Name) ?? "User";
            var departmentId = user!.FindFirstValue("DepartmentId");
            if (!string.IsNullOrEmpty(departmentId) && Guid.TryParse(departmentId, out var departmentGuid))
            {
                _currentUserDepartmentId = departmentGuid;
            }
        }

        if (HubConnection.State == HubConnectionState.Disconnected)
        {
            try
            {
                await HubConnection.StartAsync();
                Console.WriteLine("Connected to SignalR hub");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error connecting to SignalR: {ex.Message}");
            }
        }

        await base.OnInitializedAsync();
    }

    private void HandleLogout()
    {
        NavigationManager.NavigateTo("/Account/LogoutProcessor", true);
    }

    public async ValueTask DisposeAsync()
    {
        if (HubConnection.State == HubConnectionState.Connected && _currentUserDepartmentId != Guid.Empty)
        {
            await HubConnection.SendAsync("LeaveDepartmentGroup", _currentUserDepartmentId);
        }
    }

}